{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./src/PriorityRevQueue.ts","webpack://[name]/./src/RevQueue.ts","webpack://[name]/./src/Shared.ts","webpack://[name]/./src/test/RevQueueTests.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAqC;AAC9B,+BAA+B,iDAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAoD;AAC7C,uBAAuB,iDAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qDAAa;;;;;;;;;;;;;ACjBtC;AAAA;AAAA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA,CAAC,sCAAsC;AAChC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrFA;AAAA;AAAA;AAAA;AAAA;AAAuC;AACG;AACa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mDAAmD,SAAS,uDAAuD;AAC9J;AACA;AACA;AACA;AACA;AACA,kCAAkC,qDAAa;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,2CAA2C;AACxD,YAAY,wDAAwD;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,qDAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qDAAa,UAAU;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,QAAQ,kDAAQ;AAChB,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA,QAAQ,kDAAQ;AAChB,0BAA0B,kDAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA,uDAAuD,EAAE,QAAQ,EAAE;AACnE;AACA;AACA;AACA;AACA,yBAAyB,kDAAQ;AACjC,0BAA0B,kDAAQ;AAClC;AACA,QAAQ,kDAAQ;AAChB,uBAAuB,uCAAuC;AAC9D;AACA;AACA;AACA,uBAAuB,2CAA2C;AAClE;AACA;AACA;AACA,QAAQ,kDAAQ;AAChB;AACA;AACA;AACA,6BAA6B,kDAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,2FAA2F;AACxG,aAAa,gGAAgG;AAC7G,aAAa;AACb;AACA,wDAAwD,SAAS;AACjE;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kEAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kEAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kEAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kEAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,kDAAQ;AACrB,aAAa,kEAAgB","file":"RevQueueTests.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"RevQueueTests\"] = factory();\n\telse\n\t\troot[\"RevQueueTests\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/test/RevQueueTests.ts\");\n","import { QueueBase } from './Shared';\r\nexport class PriorityRevQueue extends QueueBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.isReversed = false;\r\n    }\r\n    enqueue(item, priority) {\r\n        if (this.isReversed) {\r\n            this.items.setDirection(0);\r\n            this.isReversed = false;\r\n        }\r\n        this.items.push({ item, priority });\r\n        return this;\r\n    }\r\n    dequeue() {\r\n        if (this.isEmpty()) {\r\n            throw new Error('Invalid Operation: Can not dequeue from empty queue');\r\n        }\r\n        if (!this.isReversed) {\r\n            this.items.setDirection(1);\r\n            this.items.sort(PriorityRevQueue.compareNodePriority);\r\n            this.isReversed = true;\r\n        }\r\n        return this.items.pop().item;\r\n    }\r\n}\r\nPriorityRevQueue.compareNodePriority = (a, b) => a.priority - b.priority;\r\n","import { ReverseMethod, QueueBase } from './Shared';\r\nexport class RevQueue extends QueueBase {\r\n    enqueue(item) {\r\n        this.items\r\n            .setDirection(0, RevQueue.reverseMethod)\r\n            .push(item);\r\n        return this;\r\n    }\r\n    dequeue() {\r\n        if (this.isEmpty()) {\r\n            throw new Error('Invalid Operation: Can not dequeue from an empty queue.');\r\n        }\r\n        return this.items\r\n            .setDirection(1, RevQueue.reverseMethod)\r\n            .pop();\r\n    }\r\n}\r\nRevQueue.reverseMethod = ReverseMethod.Native;\r\n","export var ReverseMethod;\r\n(function (ReverseMethod) {\r\n    ReverseMethod[ReverseMethod[\"Native\"] = 0] = \"Native\";\r\n    ReverseMethod[ReverseMethod[\"PushPop\"] = 1] = \"PushPop\";\r\n    ReverseMethod[ReverseMethod[\"MirrorSwap\"] = 2] = \"MirrorSwap\";\r\n})(ReverseMethod || (ReverseMethod = {}));\r\nexport class QueueBase {\r\n    constructor() {\r\n        this.items = new ReversableArray();\r\n    }\r\n    get length() {\r\n        return this.items.length();\r\n    }\r\n    clear() {\r\n        this.items.clear();\r\n    }\r\n    isEmpty() {\r\n        return this.items.length() === 0;\r\n    }\r\n    peek() {\r\n        return this.items.peek();\r\n    }\r\n}\r\nexport class ReversableArray {\r\n    constructor() {\r\n        this.backingArray = [];\r\n        this.isReversed = 0;\r\n    }\r\n    clear() {\r\n        this.backingArray.length = 0;\r\n    }\r\n    length() {\r\n        return this.backingArray.length;\r\n    }\r\n    pop() {\r\n        return this.backingArray.pop();\r\n    }\r\n    push(item) {\r\n        this.backingArray.push(item);\r\n    }\r\n    peek() {\r\n        return (this.backingArray.length === 0)\r\n            ? undefined\r\n            : this.backingArray[(this.isReversed === 0 ? 0 : this.backingArray.length - 1)];\r\n    }\r\n    sort(compareFn) {\r\n        this.backingArray.sort(compareFn);\r\n        return this;\r\n    }\r\n    setDirection(reversed, mode = ReverseMethod.Native) {\r\n        if (reversed !== this.isReversed) {\r\n            this.isReversed = reversed;\r\n            switch (mode) {\r\n                case ReverseMethod.Native:\r\n                    this.backingArray.reverse();\r\n                    break;\r\n                case ReverseMethod.PushPop:\r\n                    {\r\n                        let len = this.backingArray.length;\r\n                        const newArray = new Array(len);\r\n                        let idx = 0;\r\n                        while (len--) {\r\n                            newArray[idx++] = this.backingArray.pop();\r\n                        }\r\n                        this.backingArray = newArray;\r\n                    }\r\n                    break;\r\n                case ReverseMethod.MirrorSwap:\r\n                    let right = this.backingArray.length - 1;\r\n                    let left = 0;\r\n                    let tmp;\r\n                    while (left < right) {\r\n                        tmp = this.backingArray[left];\r\n                        this.backingArray[left] = this.backingArray[right];\r\n                        this.backingArray[right] = tmp;\r\n                        ++left;\r\n                        --right;\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new Error('Unsupported Reverse Mode');\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n}\r\n","import { RevQueue } from '../RevQueue';\r\nimport { ReverseMethod } from '../Shared';\r\nimport { PriorityRevQueue } from '../PriorityRevQueue';\r\nconst ReverseMethodPerformanceItemCount = 1000000;\r\nconst ReverseMethodPerformanceReversalCount = 100;\r\nconst TableHeaders = {\r\n    BasicIO: 'Basic IO',\r\n    DequeueTime: 'Dequeue Time(ms)',\r\n    DequeueTimePerItem: 'Dequeue Time Per Item(µs)',\r\n    EnqueueTime: 'Enqueue Time(ms)',\r\n    EnqueueTimePerItem: 'Enqueue Time Per Item(µs)',\r\n    ItemCount: 'Item Count',\r\n    MixedTime: 'Mixed Time(ms)',\r\n    MixedTimePerItem: 'Mixed Time Per Item(µs)',\r\n    Name: 'Reversal Method',\r\n    QueueImplementation: 'Queue Implementation',\r\n    ReversePerformance: `Time to reverse ${ReverseMethodPerformanceItemCount.toLocaleString()} items ${ReverseMethodPerformanceReversalCount.toLocaleString()} times(ms)`,\r\n    TotalTime: 'Total Time(ms)',\r\n    TotalTimePerItem: 'Total Time Per Item(µs)'\r\n};\r\nclass ReversalTestResult {\r\n    constructor(method, passedBasicIO, performance) {\r\n        this[TableHeaders.Name] = ReverseMethod[method];\r\n        this[TableHeaders.BasicIO] = (passedBasicIO ? 'Passed' : 'Failed');\r\n        this[TableHeaders.ReversePerformance] = performance ? performance.value : -1;\r\n    }\r\n}\r\nclass PerformanceTestResult {\r\n    constructor(method, itemCount, enqueueTime, dequeueTime, mixedTime) {\r\n        this[TableHeaders.QueueImplementation] = method;\r\n        this[TableHeaders.ItemCount] = itemCount;\r\n        this[TableHeaders.EnqueueTime] = enqueueTime;\r\n        this[TableHeaders.EnqueueTimePerItem] = (enqueueTime / itemCount) * 1000;\r\n        this[TableHeaders.DequeueTime] = dequeueTime;\r\n        this[TableHeaders.DequeueTimePerItem] = (dequeueTime / itemCount) * 1000;\r\n        this[TableHeaders.MixedTime] = mixedTime;\r\n        this[TableHeaders.MixedTimePerItem] = (mixedTime / itemCount) * 1000;\r\n        this[TableHeaders.TotalTime] = (enqueueTime + dequeueTime + mixedTime);\r\n        this[TableHeaders.TotalTimePerItem] = ((enqueueTime + dequeueTime + mixedTime) / itemCount) * 1000;\r\n    }\r\n}\r\nclass TestingResults {\r\n    constructor() {\r\n        this.reversalTests = [];\r\n        this.performanceTests = [];\r\n    }\r\n    OuputResults() {\r\n        console.group('Basic IO');\r\n        console.table(this.reversalTests);\r\n        console.groupEnd();\r\n        console.group('Performance');\r\n        console.table(this.performanceTests);\r\n        console.groupEnd();\r\n    }\r\n}\r\nclass PerfCounter {\r\n    constructor() {\r\n        this.value = 0;\r\n        this.startTick = 0;\r\n    }\r\n    start() { this.startTick = window.performance.now(); }\r\n    stop() { this.value = window.performance.now() - this.startTick; }\r\n}\r\nconst EnumToArray = (enumeration) => {\r\n    return Object.keys(enumeration)\r\n        .map((key) => enumeration[key])\r\n        .filter((v) => typeof v === 'number');\r\n};\r\nclass RevQueueTests {\r\n    constructor() {\r\n        this.reverseMethods = EnumToArray(ReverseMethod);\r\n        this.results = new TestingResults();\r\n    }\r\n    RunTests() {\r\n        const fastestAlgo = {};\r\n        this.reverseMethods.forEach((rMethod) => {\r\n            let passed = false;\r\n            let methodPerf;\r\n            try {\r\n                console.log(`Testing ${ReverseMethod[rMethod]} Viability`);\r\n                this.TestBasicIO(rMethod);\r\n                methodPerf = this.TestReversalMethodTime(rMethod);\r\n                passed = true;\r\n                if (fastestAlgo.perf === undefined || methodPerf.value < fastestAlgo.perf.value) {\r\n                    fastestAlgo.method = rMethod;\r\n                    fastestAlgo.perf = methodPerf;\r\n                }\r\n            }\r\n            catch (ex) {\r\n                passed = false;\r\n                console.exception(ex);\r\n            }\r\n            this.results.reversalTests.push(new ReversalTestResult(rMethod, passed, methodPerf));\r\n        });\r\n        if (fastestAlgo.method === undefined) {\r\n            return;\r\n        }\r\n        RevQueue.reverseMethod = fastestAlgo.method;\r\n        for (let p = 15; p <= 18; p++) {\r\n            this.TestMethodologies(Math.pow(2, p));\r\n        }\r\n        this.results.OuputResults();\r\n    }\r\n    TestBasicIO(mode) {\r\n        RevQueue.reverseMethod = mode;\r\n        const queue = new RevQueue();\r\n        queue\r\n            .enqueue(1)\r\n            .enqueue(2)\r\n            .enqueue(3);\r\n        if (queue.length < 3) {\r\n            throw new Error('Expected size of 3');\r\n        }\r\n        if (queue.dequeue() !== 1) {\r\n            throw new Error('Expected dequeue of 1');\r\n        }\r\n        if (queue.dequeue() !== 2) {\r\n            throw new Error('Expected dequeue of 2');\r\n        }\r\n        if (queue.dequeue() !== 3) {\r\n            throw new Error('Expected dequeue of 3');\r\n        }\r\n        if (queue.length > 0) {\r\n            throw new Error('Expected size of 0');\r\n        }\r\n        for (let i = 0; i < 1000000; ++i) {\r\n            queue.enqueue(i);\r\n        }\r\n        for (let i = 0; i < 1000000; ++i) {\r\n            const v = queue.dequeue();\r\n            if (v !== i) {\r\n                throw new Error(`Expected dequeue of ${i}, got ${v} `);\r\n            }\r\n        }\r\n    }\r\n    TestReversalMethodTime(mode) {\r\n        const prevMode = RevQueue.reverseMethod;\r\n        const queue = new RevQueue();\r\n        const perf = new PerfCounter();\r\n        RevQueue.reverseMethod = mode;\r\n        for (let i = 0; i < ReverseMethodPerformanceItemCount; ++i) {\r\n            queue.enqueue(i);\r\n        }\r\n        perf.start();\r\n        for (let i = 0; i < ReverseMethodPerformanceReversalCount; ++i) {\r\n            queue.enqueue(queue.dequeue());\r\n        }\r\n        perf.stop();\r\n        RevQueue.reverseMethod = prevMode;\r\n        return perf;\r\n    }\r\n    TestMethodologies(maxItems) {\r\n        const revQueue = new RevQueue();\r\n        const shiftyArray = [];\r\n        const unshiftyArray = [];\r\n        const counters = {\r\n            insertion: new PerfCounter(),\r\n            mixed: new PerfCounter(),\r\n            removal: new PerfCounter()\r\n        };\r\n        const methodoligies = [\r\n            { name: 'RevQueue', enqueue: (v) => revQueue.enqueue(v), dequeue: () => revQueue.dequeue() },\r\n            { name: 'Shift + Push', enqueue: (v) => shiftyArray.push(v), dequeue: () => shiftyArray.shift() },\r\n            { name: 'Unshift + Pop', enqueue: (v) => unshiftyArray.unshift(v), dequeue: () => unshiftyArray.pop() }\r\n        ];\r\n        console.log(`Testing Queue Methodoligies with ${maxItems} items...`);\r\n        methodoligies.forEach((queue) => {\r\n            counters.insertion.start();\r\n            for (let i = 0; i < maxItems; ++i) {\r\n                queue.enqueue(12);\r\n            }\r\n            counters.insertion.stop();\r\n            counters.removal.start();\r\n            for (let i = 0; i < maxItems; ++i) {\r\n                queue.dequeue();\r\n            }\r\n            counters.removal.stop();\r\n            counters.mixed.start();\r\n            for (let i = 0; i < maxItems; ++i) {\r\n                let eq = 0;\r\n                let dq = 0;\r\n                let count = 0;\r\n                if (count >= 100) {\r\n                    while (count-- > 0) {\r\n                        queue.dequeue();\r\n                    }\r\n                    eq = 0;\r\n                    dq = 0;\r\n                }\r\n                else if (eq < 10) {\r\n                    queue.enqueue(12);\r\n                    eq++;\r\n                    count++;\r\n                }\r\n                else if (dq < 4) {\r\n                    queue.dequeue();\r\n                    dq++;\r\n                    count--;\r\n                }\r\n                else {\r\n                    i--;\r\n                    eq = 0;\r\n                    dq = 0;\r\n                }\r\n            }\r\n            counters.mixed.stop();\r\n            this.results.performanceTests.push(new PerformanceTestResult(queue.name, maxItems, counters.insertion.value, counters.removal.value, counters.mixed.value));\r\n        });\r\n    }\r\n}\r\nclass PriorityQueueTests {\r\n    RunTests() {\r\n        this.TestSamePriority();\r\n        this.TestIncreasingPriority();\r\n        this.TestMixedPriority();\r\n        this.TestComplex();\r\n        console.log('All Tests Passed');\r\n    }\r\n    TestSamePriority() {\r\n        console.log('Testing Same Priority');\r\n        const queue = new PriorityRevQueue();\r\n        queue.enqueue(1, 1)\r\n            .enqueue(2, 1)\r\n            .enqueue(3, 1)\r\n            .enqueue(4, 1);\r\n        if (queue.dequeue() !== 1) {\r\n            throw new Error('Expected Dequeue of 1');\r\n        }\r\n        if (queue.dequeue() !== 2) {\r\n            throw new Error('Expected Dequeue of 2');\r\n        }\r\n        if (queue.dequeue() !== 3) {\r\n            throw new Error('Expected Dequeue of 3');\r\n        }\r\n        if (queue.dequeue() !== 4) {\r\n            throw new Error('Expected Dequeue of 4');\r\n        }\r\n    }\r\n    TestIncreasingPriority() {\r\n        console.log('Testing Increasing Priority');\r\n        const queue = new PriorityRevQueue();\r\n        queue.enqueue(1, 10)\r\n            .enqueue(2, 20)\r\n            .enqueue(3, 30)\r\n            .enqueue(4, 40);\r\n        if (queue.dequeue() !== 4) {\r\n            throw new Error('Expected Dequeue of 4');\r\n        }\r\n        if (queue.dequeue() !== 3) {\r\n            throw new Error('Expected Dequeue of 3');\r\n        }\r\n        if (queue.dequeue() !== 2) {\r\n            throw new Error('Expected Dequeue of 2');\r\n        }\r\n        if (queue.dequeue() !== 1) {\r\n            throw new Error('Expected Dequeue of 1');\r\n        }\r\n    }\r\n    TestMixedPriority() {\r\n        console.log('Testing Mixed Priority');\r\n        const queue = new PriorityRevQueue();\r\n        queue.enqueue(1, 50)\r\n            .enqueue(2, 100)\r\n            .enqueue(3, 49)\r\n            .enqueue(4, 101);\r\n        if (queue.dequeue() !== 4) {\r\n            throw new Error('Expected Dequeue of 4');\r\n        }\r\n        if (queue.dequeue() !== 2) {\r\n            throw new Error('Expected Dequeue of 2');\r\n        }\r\n        if (queue.dequeue() !== 1) {\r\n            throw new Error('Expected Dequeue of 1');\r\n        }\r\n        if (queue.dequeue() !== 3) {\r\n            throw new Error('Expected Dequeue of 3');\r\n        }\r\n    }\r\n    TestComplex() {\r\n        console.log('Testing Mixed Priority + Mixed Operations');\r\n        const queue = new PriorityRevQueue();\r\n        queue.enqueue(1, 50)\r\n            .enqueue(2, 100)\r\n            .enqueue(3, 49)\r\n            .enqueue(4, 101);\r\n        if (queue.dequeue() !== 4) {\r\n            throw new Error('Expected Dequeue of 4');\r\n        }\r\n        queue.enqueue(5, 1);\r\n        if (queue.dequeue() !== 2) {\r\n            throw new Error('Expected Dequeue of 2');\r\n        }\r\n        if (queue.dequeue() !== 1) {\r\n            throw new Error('Expected Dequeue of 1');\r\n        }\r\n        queue.enqueue(6, 50);\r\n        queue.enqueue(7, 2);\r\n        if (queue.dequeue() !== 6) {\r\n            throw new Error('Expected Dequeue of 6');\r\n        }\r\n        if (queue.dequeue() !== 3) {\r\n            throw new Error('Expected Dequeue of 3');\r\n        }\r\n        if (queue.dequeue() !== 7) {\r\n            throw new Error('Expected Dequeue of 7');\r\n        }\r\n        if (queue.dequeue() !== 5) {\r\n            throw new Error('Expected Dequeue of 5');\r\n        }\r\n    }\r\n}\r\nexport function Run(testFlag) {\r\n    if (testFlag & 1) {\r\n        console.group('RevQueue Tests');\r\n        (new RevQueueTests()).RunTests();\r\n        console.groupEnd();\r\n    }\r\n    if (testFlag & 2) {\r\n        console.group('PriorityRevQueue Tests');\r\n        (new PriorityQueueTests()).RunTests();\r\n        console.groupEnd();\r\n    }\r\n}\r\nconsole.info(RevQueue);\r\nconsole.info(PriorityRevQueue);\r\n"],"sourceRoot":""}