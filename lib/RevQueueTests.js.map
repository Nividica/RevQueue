{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./src/PriorityQueue.ts","webpack://[name]/./src/RevQueue.ts","webpack://[name]/./src/Shared.ts","webpack://[name]/./src/test/RevQueueTests.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAqC;AAC9B,4BAA4B,iDAAS;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAoD;AAC7C,uBAAuB,iDAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qDAAa;;;;;;;;;;;;;ACjBtC;AAAA;AAAA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;AAChC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,gBAAgB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrFA;AAAA;AAAA;AAAA;AAAA;AAAuC;AACG;AACO;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,2CAA2C;AACxD,YAAY,wDAAwD;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,qDAAa;AACrD,2BAA2B,qDAAa;AACxC;AACA;AACA,wEAAwE,qDAAa;AACrF;AACA;AACA;AACA;AACA,YAAY,kDAAQ;AACpB,2BAA2B,SAAS;AACpC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ,kDAAQ;AAChB,0BAA0B,kDAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA,uDAAuD,EAAE,QAAQ,EAAE;AACnE;AACA;AACA,uCAAuC,qDAAa,OAAO;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,qDAAa,mBAAmB;AACtF;AACA;AACA,gDAAgD,qDAAa,OAAO;AACpE,yBAAyB,kDAAQ;AACjC,0BAA0B,kDAAQ;AAClC;AACA;AACA;AACA;AACA,QAAQ,kDAAQ;AAChB,uBAAuB,eAAe;AACtC;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,6BAA6B,WAAW;AACxC;AACA,QAAQ,kDAAQ;AAChB;AACA;AACA;AACA,6BAA6B,kDAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,SAAS;AACxD;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA,uCAAuC,SAAS;AAChD;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA,qCAAqC,SAAS;AAC9C;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,SAAS;AAC7C;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA;AACA,oDAAoD,SAAS,UAAU,QAAQ,OAAO,8BAA8B,6CAA6C,MAAM,KAAK,cAAc;AAC1L;AACA;AACA;AACA;AACA,gCAAgC,mCAAmC;AACnE,8BAA8B,iCAAiC;AAC/D,gCAAgC,mCAAmC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA","file":"RevQueueTests.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"RevQueueTests\"] = factory();\n\telse\n\t\troot[\"RevQueueTests\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/test/RevQueueTests.ts\");\n","import { QueueBase } from './Shared';\r\nexport class PriorityQueue extends QueueBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.isReversed = false;\r\n    }\r\n    enqueue(item, priority) {\r\n        if (this.isReversed) {\r\n            this.items.setDirection(1);\r\n            this.isReversed = false;\r\n        }\r\n        this.items.push({ item, priority });\r\n        return this;\r\n    }\r\n    dequeue() {\r\n        if (this.isEmpty()) {\r\n            throw new Error('Invalid Operation: Can not dequeue from empty queue');\r\n        }\r\n        if (!this.isReversed) {\r\n            this.items.setDirection(0);\r\n            this.items.sort(PriorityQueue.compareNodePriority);\r\n            this.isReversed = true;\r\n        }\r\n        return this.items.pop().item;\r\n    }\r\n}\r\nPriorityQueue.compareNodePriority = (a, b) => a.priority - b.priority;\r\n","import { ReverseMethod, QueueBase } from './Shared';\r\nexport class RevQueue extends QueueBase {\r\n    enqueue(item) {\r\n        this.items\r\n            .setDirection(1, RevQueue.reverseMethod)\r\n            .push(item);\r\n        return this;\r\n    }\r\n    dequeue() {\r\n        if (this.isEmpty()) {\r\n            throw new Error('Invalid Operation: Can not dequeue from an empty queue.');\r\n        }\r\n        return this.items\r\n            .setDirection(0, RevQueue.reverseMethod)\r\n            .pop();\r\n    }\r\n}\r\nRevQueue.reverseMethod = ReverseMethod.Native;\r\n","export var ReverseMethod;\r\n(function (ReverseMethod) {\r\n    ReverseMethod[ReverseMethod[\"Native\"] = 0] = \"Native\";\r\n    ReverseMethod[ReverseMethod[\"SlicedPush\"] = 1] = \"SlicedPush\";\r\n    ReverseMethod[ReverseMethod[\"PushPop\"] = 2] = \"PushPop\";\r\n    ReverseMethod[ReverseMethod[\"MirrorSwap\"] = 3] = \"MirrorSwap\";\r\n})(ReverseMethod || (ReverseMethod = {}));\r\nexport class QueueBase {\r\n    constructor() {\r\n        this.items = new ReversableArray();\r\n    }\r\n    get length() {\r\n        return this.items.length();\r\n    }\r\n    clear() {\r\n        this.items.clear();\r\n    }\r\n    isEmpty() {\r\n        return this.items.length() === 0;\r\n    }\r\n}\r\nexport class ReversableArray {\r\n    constructor() {\r\n        this.backingArray = [];\r\n        this.isReversed = 1;\r\n    }\r\n    clear() {\r\n        this.backingArray.length = 0;\r\n    }\r\n    length() {\r\n        return this.backingArray.length;\r\n    }\r\n    pop() {\r\n        return this.backingArray.pop();\r\n    }\r\n    push(item) {\r\n        this.backingArray.push(item);\r\n    }\r\n    sort(compareFn) {\r\n        this.backingArray.sort(compareFn);\r\n        return this;\r\n    }\r\n    setDirection(reversed, mode = ReverseMethod.Native) {\r\n        if (reversed !== this.isReversed) {\r\n            this.isReversed = reversed;\r\n            switch (mode) {\r\n                case ReverseMethod.Native:\r\n                    this.backingArray.reverse();\r\n                    break;\r\n                case ReverseMethod.SlicedPush:\r\n                    {\r\n                        let idx = this.backingArray.length - 2;\r\n                        while (idx > -1) {\r\n                            this.backingArray.push(this.backingArray[idx]);\r\n                            this.backingArray.splice(idx--, 1);\r\n                        }\r\n                    }\r\n                    break;\r\n                case ReverseMethod.PushPop:\r\n                    {\r\n                        let len = this.backingArray.length;\r\n                        const newArray = new Array(len);\r\n                        let idx = 0;\r\n                        while (len--) {\r\n                            newArray[idx++] = this.backingArray.pop();\r\n                        }\r\n                        this.backingArray = newArray;\r\n                    }\r\n                    break;\r\n                case ReverseMethod.MirrorSwap:\r\n                    const last = this.backingArray.length - 1;\r\n                    const halfLen = last / 2;\r\n                    let tmp;\r\n                    for (let idx = 0; idx <= halfLen; idx++) {\r\n                        tmp = this.backingArray[idx];\r\n                        this.backingArray[idx] = this.backingArray[last - idx];\r\n                        this.backingArray[last - idx] = tmp;\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new Error('Unsupported Reverse Mode');\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n}\r\n","import { RevQueue } from '../RevQueue';\r\nimport { ReverseMethod } from '../Shared';\r\nimport { PriorityQueue } from '../PriorityQueue';\r\nclass PerfCounter {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.value = 0;\r\n        this.startTick = 0;\r\n    }\r\n    start() { this.startTick = window.performance.now(); }\r\n    stop() { this.value = window.performance.now() - this.startTick; }\r\n    addValues(other) {\r\n        return this.value + other.value;\r\n    }\r\n}\r\nclass ReverseModeMetric {\r\n    constructor(mode) {\r\n        this.mode = mode;\r\n        this.time = 0;\r\n    }\r\n}\r\nclass MethodologyCounterSet {\r\n    constructor() {\r\n        this.revQueue = new PerfCounter('RevQueue');\r\n        this.shifty = new PerfCounter('Shifting');\r\n        this.unshifty = new PerfCounter('Unshifting');\r\n    }\r\n    addTo(other) {\r\n        const added = new MethodologyCounterSet();\r\n        added.revQueue.value = this.revQueue.addValues(other.revQueue);\r\n        added.shifty.value = this.shifty.addValues(other.shifty);\r\n        added.unshifty.value = this.unshifty.addValues(other.unshifty);\r\n        return added;\r\n    }\r\n}\r\nconst EnumToArray = (enumeration) => {\r\n    return Object.keys(enumeration)\r\n        .map((key) => enumeration[key])\r\n        .filter((v) => typeof v === 'number');\r\n};\r\nclass RevQueueTests {\r\n    constructor() {\r\n        this.verdicts = [];\r\n        this.reverseModes = EnumToArray(ReverseMethod);\r\n        this.fastestMode = ReverseMethod.Native;\r\n    }\r\n    RunTests() {\r\n        this.reverseModes = this.reverseModes.filter((mode) => mode !== ReverseMethod.SlicedPush);\r\n        console.log('Testing basic operations');\r\n        this.reverseModes.forEach((mode) => this.TestBasicIO(mode));\r\n        this.TestReverseModePerformance();\r\n        setTimeout(() => {\r\n            RevQueue.reverseMethod = this.fastestMode;\r\n            for (let p = 4; p <= 17; p++) {\r\n                this.TestMethodology(Math.pow(2, p));\r\n            }\r\n            console.log(this.verdicts);\r\n        }, 500);\r\n    }\r\n    TestBasicIO(mode) {\r\n        RevQueue.reverseMethod = mode;\r\n        const queue = new RevQueue();\r\n        queue\r\n            .enqueue(1)\r\n            .enqueue(2)\r\n            .enqueue(3);\r\n        if (queue.length < 3) {\r\n            throw new Error('Expected size of 3');\r\n        }\r\n        if (queue.dequeue() !== 1) {\r\n            throw new Error('Expected dequeue of 1');\r\n        }\r\n        if (queue.dequeue() !== 2) {\r\n            throw new Error('Expected dequeue of 2');\r\n        }\r\n        if (queue.dequeue() !== 3) {\r\n            throw new Error('Expected dequeue of 3');\r\n        }\r\n        if (queue.length > 0) {\r\n            throw new Error('Expected size of 0');\r\n        }\r\n        for (let i = 0; i < 1000000; ++i) {\r\n            queue.enqueue(i);\r\n        }\r\n        for (let i = 0; i < 1000000; ++i) {\r\n            const v = queue.dequeue();\r\n            if (v !== i) {\r\n                throw new Error(`Expected dequeue of ${i}, got ${v}`);\r\n            }\r\n        }\r\n        this.verdicts.push(`Basic IO(${ReverseMethod[mode]}) passed`);\r\n    }\r\n    TestReverseModePerformance() {\r\n        const metrics = this.reverseModes\r\n            .map((mode) => new ReverseModeMetric(mode));\r\n        metrics.forEach((m) => m.time = this.DetermineReversalTime(m.mode).value);\r\n        this.fastestMode = metrics.reduce((p, c) => (p.time < c.time) ? p : c).mode;\r\n        this.verdicts.push(`Fastest reversing mode: ${ReverseMethod[this.fastestMode]}`);\r\n    }\r\n    DetermineReversalTime(mode) {\r\n        console.groupCollapsed(`Reverse Mode: ${ReverseMethod[mode]}`);\r\n        const prevMode = RevQueue.reverseMethod;\r\n        const queue = new RevQueue();\r\n        const itemCount = 1000000;\r\n        const reverseCount = 100;\r\n        const perf = new PerfCounter('');\r\n        perf.start();\r\n        RevQueue.reverseMethod = mode;\r\n        for (let i = 0; i < itemCount; ++i) {\r\n            queue.enqueue(i);\r\n        }\r\n        for (let i = 0; i < reverseCount; ++i) {\r\n            queue.enqueue(queue.dequeue());\r\n        }\r\n        perf.stop();\r\n        console.log(`Time: ${perf.value} ms`);\r\n        console.groupEnd();\r\n        RevQueue.reverseMethod = prevMode;\r\n        return perf;\r\n    }\r\n    TestMethodology(maxItems) {\r\n        const revQueue = new RevQueue();\r\n        const shiftyArray = [];\r\n        const unshiftyArray = [];\r\n        const counters = {\r\n            Insertion: new MethodologyCounterSet(),\r\n            Random: new MethodologyCounterSet(),\r\n            Removal: new MethodologyCounterSet()\r\n        };\r\n        console.groupCollapsed(`Performance::${maxItems}`);\r\n        counters.Insertion.revQueue.start();\r\n        for (let i = 0; i < maxItems; ++i) {\r\n            revQueue.enqueue(12);\r\n        }\r\n        counters.Insertion.revQueue.stop();\r\n        counters.Insertion.shifty.start();\r\n        for (let i = 0; i < maxItems; ++i) {\r\n            shiftyArray.push(12);\r\n        }\r\n        counters.Insertion.shifty.stop();\r\n        counters.Insertion.unshifty.start();\r\n        for (let i = 0; i < maxItems; ++i) {\r\n            unshiftyArray.unshift(12);\r\n        }\r\n        counters.Insertion.unshifty.stop();\r\n        this.DumpCounters(`Insertion(${maxItems})`, counters.Insertion);\r\n        counters.Removal.revQueue.start();\r\n        for (let i = 0; i < maxItems; ++i) {\r\n            revQueue.dequeue();\r\n        }\r\n        counters.Removal.revQueue.stop();\r\n        counters.Removal.shifty.start();\r\n        for (let i = 0; i < maxItems; ++i) {\r\n            shiftyArray.shift();\r\n        }\r\n        counters.Removal.shifty.stop();\r\n        counters.Removal.unshifty.start();\r\n        for (let i = 0; i < maxItems; ++i) {\r\n            unshiftyArray.pop();\r\n        }\r\n        counters.Removal.unshifty.stop();\r\n        this.DumpCounters(`Removal(${maxItems})`, counters.Removal);\r\n        counters.Random.revQueue.start();\r\n        for (let i = 0; i < maxItems; ++i) {\r\n            if ((revQueue.length > 0) && (Math.random() > 0.5)) {\r\n                revQueue.dequeue();\r\n            }\r\n            else {\r\n                revQueue.enqueue(12);\r\n            }\r\n        }\r\n        counters.Random.revQueue.stop();\r\n        counters.Random.shifty.start();\r\n        for (let i = 0; i < maxItems; ++i) {\r\n            if ((shiftyArray.length > 0) && (Math.random() > 0.5)) {\r\n                shiftyArray.shift();\r\n            }\r\n            else {\r\n                shiftyArray.push(12);\r\n            }\r\n        }\r\n        counters.Random.shifty.stop();\r\n        counters.Random.unshifty.start();\r\n        for (let i = 0; i < maxItems; ++i) {\r\n            if ((unshiftyArray.length > 0) && (Math.random() > 0.5)) {\r\n                unshiftyArray.pop();\r\n            }\r\n            else {\r\n                unshiftyArray.unshift(12);\r\n            }\r\n        }\r\n        counters.Random.unshifty.stop();\r\n        this.DumpCounters(`Random(${maxItems})`, counters.Random);\r\n        const totals = counters.Insertion\r\n            .addTo(counters.Removal)\r\n            .addTo(counters.Random);\r\n        this.DumpCounters(`All(${maxItems})`, totals);\r\n        const rqSpeed = Math.floor(totals.revQueue.value);\r\n        const otherFastest = Math.floor([totals.shifty, totals.unshifty]\r\n            .reduce((p, c) => (p.value < c.value) ? p : c).value);\r\n        const diff = Math.abs(rqSpeed - otherFastest);\r\n        this.verdicts.push(`RevQueue Performance, ${maxItems} items, ${rqSpeed} ms: ${otherFastest !== rqSpeed ? `${otherFastest < rqSpeed ? 'Slower' : 'Faster'} by ${diff} ms` : 'Even'}`);\r\n        console.groupEnd();\r\n    }\r\n    DumpCounters(name, counters) {\r\n        console.groupCollapsed(name);\r\n        console.log(`RevQueue ${counters.revQueue.value.toFixed(2)} ms`);\r\n        console.log(`Shifty ${counters.shifty.value.toFixed(2)} ms`);\r\n        console.log(`Unshifty ${counters.unshifty.value.toFixed(2)} ms`);\r\n        console.groupEnd();\r\n    }\r\n}\r\nclass PriorityQueueTests {\r\n    RunTests() {\r\n        this.TestSamePriority();\r\n        this.TestGrowingPriority();\r\n        this.TestMixedPriority();\r\n        this.TestComplex();\r\n    }\r\n    TestSamePriority() {\r\n        const queue = new PriorityQueue();\r\n        queue.enqueue(1, 1)\r\n            .enqueue(2, 1)\r\n            .enqueue(3, 1)\r\n            .enqueue(4, 1);\r\n        if (queue.dequeue() !== 1) {\r\n            throw new Error('Expected Dequeue of 1');\r\n        }\r\n        if (queue.dequeue() !== 2) {\r\n            throw new Error('Expected Dequeue of 2');\r\n        }\r\n        if (queue.dequeue() !== 3) {\r\n            throw new Error('Expected Dequeue of 3');\r\n        }\r\n        if (queue.dequeue() !== 4) {\r\n            throw new Error('Expected Dequeue of 4');\r\n        }\r\n    }\r\n    TestGrowingPriority() {\r\n        const queue = new PriorityQueue();\r\n        queue.enqueue(1, 10)\r\n            .enqueue(2, 20)\r\n            .enqueue(3, 30)\r\n            .enqueue(4, 40);\r\n        if (queue.dequeue() !== 4) {\r\n            throw new Error('Expected Dequeue of 4');\r\n        }\r\n        if (queue.dequeue() !== 3) {\r\n            throw new Error('Expected Dequeue of 3');\r\n        }\r\n        if (queue.dequeue() !== 2) {\r\n            throw new Error('Expected Dequeue of 2');\r\n        }\r\n        if (queue.dequeue() !== 1) {\r\n            throw new Error('Expected Dequeue of 1');\r\n        }\r\n    }\r\n    TestMixedPriority() {\r\n        const queue = new PriorityQueue();\r\n        queue.enqueue(1, 50)\r\n            .enqueue(2, 100)\r\n            .enqueue(3, 49)\r\n            .enqueue(4, 101);\r\n        if (queue.dequeue() !== 4) {\r\n            throw new Error('Expected Dequeue of 4');\r\n        }\r\n        if (queue.dequeue() !== 2) {\r\n            throw new Error('Expected Dequeue of 2');\r\n        }\r\n        if (queue.dequeue() !== 1) {\r\n            throw new Error('Expected Dequeue of 1');\r\n        }\r\n        if (queue.dequeue() !== 3) {\r\n            throw new Error('Expected Dequeue of 3');\r\n        }\r\n    }\r\n    TestComplex() {\r\n        const queue = new PriorityQueue();\r\n        queue.enqueue(1, 50)\r\n            .enqueue(2, 100)\r\n            .enqueue(3, 49)\r\n            .enqueue(4, 101);\r\n        if (queue.dequeue() !== 4) {\r\n            throw new Error('Expected Dequeue of 4');\r\n        }\r\n        queue.enqueue(5, 1);\r\n        if (queue.dequeue() !== 2) {\r\n            throw new Error('Expected Dequeue of 2');\r\n        }\r\n        if (queue.dequeue() !== 1) {\r\n            throw new Error('Expected Dequeue of 1');\r\n        }\r\n        queue.enqueue(6, 50);\r\n        queue.enqueue(7, 2);\r\n        if (queue.dequeue() !== 6) {\r\n            throw new Error('Expected Dequeue of 6');\r\n        }\r\n        if (queue.dequeue() !== 3) {\r\n            throw new Error('Expected Dequeue of 3');\r\n        }\r\n        if (queue.dequeue() !== 7) {\r\n            throw new Error('Expected Dequeue of 7');\r\n        }\r\n        if (queue.dequeue() !== 5) {\r\n            throw new Error('Expected Dequeue of 5');\r\n        }\r\n    }\r\n}\r\nexport function Run() {\r\n    if (Math.random() < 1) {\r\n        (new RevQueueTests()).RunTests();\r\n        (new PriorityQueueTests()).RunTests();\r\n    }\r\n}\r\n"],"sourceRoot":""}